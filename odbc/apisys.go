// mksyscall_windows.pl api.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package odbc

import "unsafe"
import "syscall"

var (
	mododbc32 = syscall.NewLazyDLL("odbc32.dll")

	procSQLAllocHandle     = mododbc32.NewProc("SQLAllocHandle")
	procSQLSetEnvAttr      = mododbc32.NewProc("SQLSetEnvAttr")
	procSQLDriverConnectW  = mododbc32.NewProc("SQLDriverConnectW")
	procSQLFreeHandle      = mododbc32.NewProc("SQLFreeHandle")
	procSQLDisconnect      = mododbc32.NewProc("SQLDisconnect")
	procSQLCancel          = mododbc32.NewProc("SQLCancel")
	procSQLExecDirectW     = mododbc32.NewProc("SQLExecDirectW")
	procSQLCloseCursor     = mododbc32.NewProc("SQLCloseCursor")
	procSQLFetch           = mododbc32.NewProc("SQLFetch")
	procSQLFetchScroll     = mododbc32.NewProc("SQLFetchScroll")
	procSQLSetStmtAttr     = mododbc32.NewProc("SQLSetStmtAttr")
	procSQLBindCol         = mododbc32.NewProc("SQLBindCol")
	procSQLSetConnectAttrW = mododbc32.NewProc("SQLSetConnectAttrW")
	procSQLEndTran         = mododbc32.NewProc("SQLEndTran")
	procSQLBindParameter   = mododbc32.NewProc("SQLBindParameter")
	procSQLMoreResults     = mododbc32.NewProc("SQLMoreResults")
	procSQLGetDescField    = mododbc32.NewProc("SQLGetDescField")
	procSQLGetDescRecW     = mododbc32.NewProc("SQLGetDescRecW")
	procSQLGetDiagRecW     = mododbc32.NewProc("SQLGetDiagRecW")
	procSQLColAttributeW   = mododbc32.NewProc("SQLColAttributeW")
	procSQLNumResultCols   = mododbc32.NewProc("SQLNumResultCols")
	procSQLGetData         = mododbc32.NewProc("SQLGetData")
	procSQLGetStmtAttr     = mododbc32.NewProc("SQLGetStmtAttr")
	procSQLSetDescFieldW   = mododbc32.NewProc("SQLSetDescFieldW")
)

func SQLAllocHandle(handleType SQLSMALLINT, inputHandle SQLHandle, outputHandle *SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLAllocHandle.Addr(), 3, uintptr(handleType), uintptr(inputHandle), uintptr(unsafe.Pointer(outputHandle)))
	ret = SQLReturn(r0)
	return
}

func SQLSetEnvAttr(environmentHandle SQLHandle, attribute SQLINTEGER, valuePtr SQLPOINTER, stringLength SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLSetEnvAttr.Addr(), 4, uintptr(environmentHandle), uintptr(attribute), uintptr(valuePtr), uintptr(stringLength), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLDriverConnect(connectionHandle SQLHandle, windowHandle int, inConnString *SQLCHAR, inConnStringLength SQLSMALLINT, outConnString *SQLCHAR, outConnStringLength SQLSMALLINT, outConnStringPtr *SQLSMALLINT, driverCompletion SQLUSMALLINT) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall9(procSQLDriverConnectW.Addr(), 8, uintptr(connectionHandle), uintptr(windowHandle), uintptr(unsafe.Pointer(inConnString)), uintptr(inConnStringLength), uintptr(unsafe.Pointer(outConnString)), uintptr(outConnStringLength), uintptr(unsafe.Pointer(outConnStringPtr)), uintptr(driverCompletion), 0)
	ret = SQLReturn(r0)
	return
}

func SQLFreeHandle(handleType SQLSMALLINT, handle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLFreeHandle.Addr(), 2, uintptr(handleType), uintptr(handle), 0)
	ret = SQLReturn(r0)
	return
}

func SQLDisconnect(handle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLDisconnect.Addr(), 1, uintptr(handle), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLCancel(statementHandle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLCancel.Addr(), 1, uintptr(statementHandle), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLExecDirect(statementHandle SQLHandle, statementText *SQLCHAR, textLength SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLExecDirectW.Addr(), 3, uintptr(statementHandle), uintptr(unsafe.Pointer(statementText)), uintptr(textLength))
	ret = SQLReturn(r0)
	return
}

func SQLCloseCursor(statementHandle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLCloseCursor.Addr(), 1, uintptr(statementHandle), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLFetch(statementHandle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLFetch.Addr(), 1, uintptr(statementHandle), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLFetchScroll(statementHandle SQLHandle, fetchOrientation SQLSMALLINT, fetchOffset SQLLEN) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLFetchScroll.Addr(), 3, uintptr(statementHandle), uintptr(fetchOrientation), uintptr(fetchOffset))
	ret = SQLReturn(r0)
	return
}

func SQLSetStmtAttr(statementHandle SQLHandle, attribute SQLINTEGER, valuePtr SQLPOINTER, stringLength SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLSetStmtAttr.Addr(), 4, uintptr(statementHandle), uintptr(attribute), uintptr(valuePtr), uintptr(stringLength), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLBindCol(statementHandle SQLHandle, columnNumber SQLUSMALLINT, targetType SQLSMALLINT, targetValuePtr SQLPOINTER, bufferLength SQLLEN, ind *SQLLEN) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLBindCol.Addr(), 6, uintptr(statementHandle), uintptr(columnNumber), uintptr(targetType), uintptr(targetValuePtr), uintptr(bufferLength), uintptr(unsafe.Pointer(ind)))
	ret = SQLReturn(r0)
	return
}

func SQLSetConnectAttr(connectionHandle SQLHandle, attribute SQLINTEGER, valuePtr SQLPOINTER, bufferLength SQLINTEGER, stringLengthPtr *SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLSetConnectAttrW.Addr(), 5, uintptr(connectionHandle), uintptr(attribute), uintptr(valuePtr), uintptr(bufferLength), uintptr(unsafe.Pointer(stringLengthPtr)), 0)
	ret = SQLReturn(r0)
	return
}

func SQLEndTran(handleType SQLSMALLINT, handle SQLHandle, completionType SQLSMALLINT) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLEndTran.Addr(), 3, uintptr(handleType), uintptr(handle), uintptr(completionType))
	ret = SQLReturn(r0)
	return
}

func SQLBindParameter(statementHandle SQLHandle, parameterNumber SQLUSMALLINT, inputOutputType SQLSMALLINT, valueType CDataType, parameterType SQLDataType, columnSize SQLULEN, decimalDigits SQLSMALLINT, parameterValue SQLPOINTER, bufferLength SQLLEN, ind *SQLLEN) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall12(procSQLBindParameter.Addr(), 10, uintptr(statementHandle), uintptr(parameterNumber), uintptr(inputOutputType), uintptr(valueType), uintptr(parameterType), uintptr(columnSize), uintptr(decimalDigits), uintptr(parameterValue), uintptr(bufferLength), uintptr(unsafe.Pointer(ind)), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLMoreResults(statementHandle SQLHandle) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLMoreResults.Addr(), 1, uintptr(statementHandle), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLGetDescField(descriptorHandle SQLHandle, recNumber SQLSMALLINT, fieldIdentifier SQLSMALLINT, valuePtr SQLPOINTER, bufferLength SQLINTEGER, lengthPtr *SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLGetDescField.Addr(), 6, uintptr(descriptorHandle), uintptr(recNumber), uintptr(fieldIdentifier), uintptr(valuePtr), uintptr(bufferLength), uintptr(unsafe.Pointer(lengthPtr)))
	ret = SQLReturn(r0)
	return
}

func SQLGetDescRec(descriptorHandle SQLHandle, recNumber SQLSMALLINT, name *SQLCHAR, bufferLength SQLSMALLINT, stringLengthPtr *SQLSMALLINT, typePtr *SQLSMALLINT, subTypePtr *SQLSMALLINT, lengthPtr *SQLLEN, precisionPtr *SQLSMALLINT, scalePtr *SQLSMALLINT, nullablePtr *SQLSMALLINT) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall12(procSQLGetDescRecW.Addr(), 11, uintptr(descriptorHandle), uintptr(recNumber), uintptr(unsafe.Pointer(name)), uintptr(bufferLength), uintptr(unsafe.Pointer(stringLengthPtr)), uintptr(unsafe.Pointer(typePtr)), uintptr(unsafe.Pointer(subTypePtr)), uintptr(unsafe.Pointer(lengthPtr)), uintptr(unsafe.Pointer(precisionPtr)), uintptr(unsafe.Pointer(scalePtr)), uintptr(unsafe.Pointer(nullablePtr)), 0)
	ret = SQLReturn(r0)
	return
}

func SQLGetDiagRec(handleType SQLSMALLINT, inputHandle SQLHandle, recNumber SQLSMALLINT, sqlState uintptr, nativeErrorPtr *SQLINTEGER, messageText uintptr, bufferLength SQLSMALLINT, textLengthPtr *SQLSMALLINT) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall9(procSQLGetDiagRecW.Addr(), 8, uintptr(handleType), uintptr(inputHandle), uintptr(recNumber), uintptr(sqlState), uintptr(unsafe.Pointer(nativeErrorPtr)), uintptr(messageText), uintptr(bufferLength), uintptr(unsafe.Pointer(textLengthPtr)), 0)
	ret = SQLReturn(r0)
	return
}

func SQLColAttribute(statementHandle SQLHandle, columnNumber SQLUSMALLINT, fieldIdentifier SQLColAttributeType, characterAttribute uintptr, bufferLength SQLSMALLINT, stringLengthPtr *SQLSMALLINT, numericAttributePtr *SQLLEN) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall9(procSQLColAttributeW.Addr(), 7, uintptr(statementHandle), uintptr(columnNumber), uintptr(fieldIdentifier), uintptr(characterAttribute), uintptr(bufferLength), uintptr(unsafe.Pointer(stringLengthPtr)), uintptr(unsafe.Pointer(numericAttributePtr)), 0, 0)
	ret = SQLReturn(r0)
	return
}

func SQLNumResultCols(statementHandle SQLHandle, columnCount *SQLSMALLINT) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall(procSQLNumResultCols.Addr(), 2, uintptr(statementHandle), uintptr(unsafe.Pointer(columnCount)), 0)
	ret = SQLReturn(r0)
	return
}

func SQLGetData(statementHandle SQLHandle, colNum SQLUSMALLINT, targetType CDataType, targetValuePtr uintptr, bufferLength SQLLEN, ind *SQLLEN) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLGetData.Addr(), 6, uintptr(statementHandle), uintptr(colNum), uintptr(targetType), uintptr(targetValuePtr), uintptr(bufferLength), uintptr(unsafe.Pointer(ind)))
	ret = SQLReturn(r0)
	return
}

func SQLGetStmtAttr(statementHandle SQLHandle, attribute SQLINTEGER, valuePtr uintptr, bufferLength SQLINTEGER, stringLengthPtr *SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLGetStmtAttr.Addr(), 5, uintptr(statementHandle), uintptr(attribute), uintptr(valuePtr), uintptr(bufferLength), uintptr(unsafe.Pointer(stringLengthPtr)), 0)
	ret = SQLReturn(r0)
	return
}

func SQLSetDescField(descriptorHandle SQLHandle, recNum SQLSMALLINT, fieldIdentifier SQLSMALLINT, valuePtr uintptr, bufferLength SQLINTEGER) (ret SQLReturn) {
	r0, _, _ := syscall.Syscall6(procSQLSetDescFieldW.Addr(), 5, uintptr(descriptorHandle), uintptr(recNum), uintptr(fieldIdentifier), uintptr(valuePtr), uintptr(bufferLength), 0)
	ret = SQLReturn(r0)
	return
}
